// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package grpcFlags

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FlagsClient is the client API for Flags service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FlagsClient interface {
	CheckFlag(ctx context.Context, in *CheckFlagRequest, opts ...grpc.CallOption) (*CheckFlagResult, error)
	ServiceRegister(ctx context.Context, in *ServiceRegisterRequest, opts ...grpc.CallOption) (*ServiceRegisterResponse, error)
	UserRegister(ctx context.Context, in *UserRegisterRequest, opts ...grpc.CallOption) (*UserRegisterResponse, error)
	GetKey(ctx context.Context, in *GetKeyRequest, opts ...grpc.CallOption) (*GetKeyResponse, error)
	ListOfUsers(ctx context.Context, in *Admin, opts ...grpc.CallOption) (Flags_ListOfUsersClient, error)
}

type flagsClient struct {
	cc grpc.ClientConnInterface
}

func NewFlagsClient(cc grpc.ClientConnInterface) FlagsClient {
	return &flagsClient{cc}
}

func (c *flagsClient) CheckFlag(ctx context.Context, in *CheckFlagRequest, opts ...grpc.CallOption) (*CheckFlagResult, error) {
	out := new(CheckFlagResult)
	err := c.cc.Invoke(ctx, "/flags.Flags/CheckFlag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flagsClient) ServiceRegister(ctx context.Context, in *ServiceRegisterRequest, opts ...grpc.CallOption) (*ServiceRegisterResponse, error) {
	out := new(ServiceRegisterResponse)
	err := c.cc.Invoke(ctx, "/flags.Flags/ServiceRegister", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flagsClient) UserRegister(ctx context.Context, in *UserRegisterRequest, opts ...grpc.CallOption) (*UserRegisterResponse, error) {
	out := new(UserRegisterResponse)
	err := c.cc.Invoke(ctx, "/flags.Flags/UserRegister", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flagsClient) GetKey(ctx context.Context, in *GetKeyRequest, opts ...grpc.CallOption) (*GetKeyResponse, error) {
	out := new(GetKeyResponse)
	err := c.cc.Invoke(ctx, "/flags.Flags/GetKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flagsClient) ListOfUsers(ctx context.Context, in *Admin, opts ...grpc.CallOption) (Flags_ListOfUsersClient, error) {
	stream, err := c.cc.NewStream(ctx, &Flags_ServiceDesc.Streams[0], "/flags.Flags/ListOfUsers", opts...)
	if err != nil {
		return nil, err
	}
	x := &flagsListOfUsersClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Flags_ListOfUsersClient interface {
	Recv() (*Users, error)
	grpc.ClientStream
}

type flagsListOfUsersClient struct {
	grpc.ClientStream
}

func (x *flagsListOfUsersClient) Recv() (*Users, error) {
	m := new(Users)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FlagsServer is the server API for Flags service.
// All implementations must embed UnimplementedFlagsServer
// for forward compatibility
type FlagsServer interface {
	CheckFlag(context.Context, *CheckFlagRequest) (*CheckFlagResult, error)
	ServiceRegister(context.Context, *ServiceRegisterRequest) (*ServiceRegisterResponse, error)
	UserRegister(context.Context, *UserRegisterRequest) (*UserRegisterResponse, error)
	GetKey(context.Context, *GetKeyRequest) (*GetKeyResponse, error)
	ListOfUsers(*Admin, Flags_ListOfUsersServer) error
	mustEmbedUnimplementedFlagsServer()
}

// UnimplementedFlagsServer must be embedded to have forward compatible implementations.
type UnimplementedFlagsServer struct {
}

func (UnimplementedFlagsServer) CheckFlag(context.Context, *CheckFlagRequest) (*CheckFlagResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckFlag not implemented")
}
func (UnimplementedFlagsServer) ServiceRegister(context.Context, *ServiceRegisterRequest) (*ServiceRegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ServiceRegister not implemented")
}
func (UnimplementedFlagsServer) UserRegister(context.Context, *UserRegisterRequest) (*UserRegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserRegister not implemented")
}
func (UnimplementedFlagsServer) GetKey(context.Context, *GetKeyRequest) (*GetKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKey not implemented")
}
func (UnimplementedFlagsServer) ListOfUsers(*Admin, Flags_ListOfUsersServer) error {
	return status.Errorf(codes.Unimplemented, "method ListOfUsers not implemented")
}
func (UnimplementedFlagsServer) mustEmbedUnimplementedFlagsServer() {}

// UnsafeFlagsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FlagsServer will
// result in compilation errors.
type UnsafeFlagsServer interface {
	mustEmbedUnimplementedFlagsServer()
}

func RegisterFlagsServer(s grpc.ServiceRegistrar, srv FlagsServer) {
	s.RegisterService(&Flags_ServiceDesc, srv)
}

func _Flags_CheckFlag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckFlagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlagsServer).CheckFlag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flags.Flags/CheckFlag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlagsServer).CheckFlag(ctx, req.(*CheckFlagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Flags_ServiceRegister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceRegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlagsServer).ServiceRegister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flags.Flags/ServiceRegister",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlagsServer).ServiceRegister(ctx, req.(*ServiceRegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Flags_UserRegister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlagsServer).UserRegister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flags.Flags/UserRegister",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlagsServer).UserRegister(ctx, req.(*UserRegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Flags_GetKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlagsServer).GetKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flags.Flags/GetKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlagsServer).GetKey(ctx, req.(*GetKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Flags_ListOfUsers_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Admin)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FlagsServer).ListOfUsers(m, &flagsListOfUsersServer{stream})
}

type Flags_ListOfUsersServer interface {
	Send(*Users) error
	grpc.ServerStream
}

type flagsListOfUsersServer struct {
	grpc.ServerStream
}

func (x *flagsListOfUsersServer) Send(m *Users) error {
	return x.ServerStream.SendMsg(m)
}

// Flags_ServiceDesc is the grpc.ServiceDesc for Flags service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Flags_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "flags.Flags",
	HandlerType: (*FlagsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckFlag",
			Handler:    _Flags_CheckFlag_Handler,
		},
		{
			MethodName: "ServiceRegister",
			Handler:    _Flags_ServiceRegister_Handler,
		},
		{
			MethodName: "UserRegister",
			Handler:    _Flags_UserRegister_Handler,
		},
		{
			MethodName: "GetKey",
			Handler:    _Flags_GetKey_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListOfUsers",
			Handler:       _Flags_ListOfUsers_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "flags/flags.proto",
}
